`ifndef DEFINE_STATE

// This defines the states
typedef enum logic [2:0] {
	S_IDLE,
	S_ENABLE_UART_RX,
	S_MILESTONE_1,
	S_WAIT_UART_RX
} top_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

typedef enum logic [5:0] {
	S_IDLE_M1,
	S_STATE_0,
	S_STATE_1,
	S_STATE_2,
	S_STATE_3,
	S_STATE_4,
	S_STATE_5,
	S_STATE_6,
	S_STATE_7,
	S_STATE_8,
	S_STATE_9,
	S_STATE_10,
	S_STATE_11,
	S_STATE_12,
	S_STATE_13,
	S_STATE_14,
	S_STATE_15,
	S_STATE_16,
	S_STATE_17,
	S_STATE_18,
	S_STATE_19,
	S_STATE_20,
	S_STATE_21,
	S_STATE_22,
	S_STATE_23,
	S_STATE_24,
	S_STATE_25,
	S_STATE_26,
	S_STATE_27,
	S_STATE_28,
	S_STATE_29,
	S_STATE_30,
	S_STATE_31,
	S_STATE_32,
	S_STATE_33,
	S_STATE_34,
	S_STATE_35,
	S_STATE_36,
	S_STATE_37,
	S_STATE_38,
	S_STATE_D1,
	S_STATE_D2,
	S_DELAY_STATE_1,
	S_DELAY_STATE_2,
	S_DELAY_STATE_3
} state_type;

`define DEFINE_STATE 1
`endif
